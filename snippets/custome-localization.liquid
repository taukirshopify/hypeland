<localization-form class="d-none d-md-block" >
    {% form 'localization' %}
      <div class="disclosure">
        <button type="button" class="disclosure__button" aria-expanded="false" aria-controls="CountryList">
{{ localization.country.currency.iso_code }}

          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-caret" viewBox="0 0 10 6">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor">
          </svg>
        </button>

        <ul id="CountryList" role="list" class="disclosure__list"             hidden>
          {% for country in localization.available_countries %}
            <li class="disclosure__item" tabindex="-1">
              <a href="#"{% if country.iso_code == localization.country.iso_code %} aria-current="true"{% endif %} data-value="{{ country.iso_code }}">
 {{ country.currency.iso_code }} {{ country.currency.symbol }}
              </a>
            </li>
          {% endfor %}
        </ul>

        <input type="hidden" name="country_code" value="{{ localization.country.iso_code }}">
      </div>
    {% endform %}
  </localization-form>


<script>
    class LocalizationForm extends HTMLElement {
        constructor() {
          super();
          this.elements = {
            input: this.querySelector('input[name="language_code"], input[name="country_code"]'),
            button: this.querySelector('button'),
            panel: this.querySelector('ul'),
          };
          this.elements.button.addEventListener('click', this.openSelector.bind(this));
          this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
          this.addEventListener('keyup', this.onContainerKeyUp.bind(this));
      
          this.querySelectorAll('a').forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
        }
      
        hidePanel() {
          this.elements.button.setAttribute('aria-expanded', 'false');
          this.elements.panel.setAttribute('hidden', true);
        }
      
        onContainerKeyUp(event) {
          if (event.code.toUpperCase() !== 'ESCAPE') return;
      
          this.hidePanel();
          this.elements.button.focus();
        }
      
        onItemClick(event) {
          event.preventDefault();
          const form = this.querySelector('form');
          this.elements.input.value = event.currentTarget.dataset.value;
          if (form) form.submit();
        }
      
        openSelector() {
          this.elements.button.focus();
          this.elements.panel.toggleAttribute('hidden');
          this.elements.button.setAttribute('aria-expanded', (this.elements.button.getAttribute('aria-expanded') === 'false').toString());
        }
      
        closeSelector(event) {
          const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
          if (event.relatedTarget === null || shouldClose) {
            this.hidePanel();
          }
        }
      }
      customElements.define('localization-form', LocalizationForm);
</script>



<style>
  .disclosure button {
    border: none;
    padding: 0;
    font-size: 16px;
    color: var(--title-color);
}

.disclosure button svg{
 width:18px;
 margin-left:5px;

}
.disclosure button {
  border: none;
  padding: 0;
  font-size: 16px;
  color: var(--title-color);
  margin-left: 40px;
  background: transparent;
}
.disclosure__list {
  position: absolute !important;
  padding:0;
 
 

}
ul#CountryList {
  border:1px solid;
  border-color: var(--border-color);
}
.disclosure__list  li {
  background:#fff;
  padding: 5px 16px!important;
  text-align: center;
  color:#000;
}
.disclosure__list  a{

  color:#000;
}

ul#CountryList li:hover > a {
  color:{{  section.settings.color }};
}
</style>